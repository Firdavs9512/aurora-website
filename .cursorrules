# Aurora Terminal Agent - Cursor Qoidalari

## Loyiha tuzilishi

```
aurora-agent-landing/
├── public/                  # Statik fayllar
├── src/                     # Asosiy kod
│   ├── assets/              # Rasmlar, ikonkalar va boshqa media fayllar
│   │   ├── common/          # Umumiy komponentlar (tugmalar, kartalar, va h.k.)
│   │   ├── layout/          # Layout komponentlari (header, footer, va h.k.)
│   │   └── sections/        # Sahifa seksiyalari
│   ├── hooks/               # Custom React hooks
│   ├── pages/               # Sahifalar
│   ├── styles/              # Global stillar
│   ├── types/               # TypeScript tiplashtirish
│   ├── utils/               # Utility funksiyalar
│   ├── App.tsx              # Asosiy App komponenti
│   ├── main.tsx             # Kirish nuqtasi
│   └── index.css            # Global CSS
├── .gitignore               # Git ignore fayli
├── index.html               # HTML shabloni
├── package.json             # Paket konfiguratsiyasi
├── tsconfig.json            # TypeScript konfiguratsiyasi
├── vite.config.ts           # Vite konfiguratsiyasi
└── README.md                # Loyiha haqida ma'lumot
```

## Kod standartlari

### Fayl nomlash

- Komponentlar: PascalCase (masalan, `TerminalDemo.tsx`)
- Utility fayllar: camelCase (masalan, `terminalUtils.ts`)
- Testlar: komponent nomi + `.test.tsx` (masalan, `TerminalDemo.test.tsx`)

### Komponentlar

- Har bir komponent alohida faylda bo'lishi kerak
- Funksional komponentlar va React Hooks ishlatiladi
- Props uchun TypeScript interfeyslari yoki tiplar ishlatiladi
- Komponentlar imkon qadar kichik va qayta ishlatiluvchi bo'lishi kerak

```tsx
// Yaxshi amaliyot
import { type FC } from 'react';

interface ButtonProps {
  label: string;
  onClick: () => void;
  variant?: 'primary' | 'secondary';
}

export const Button: FC<ButtonProps> = ({ 
  label, 
  onClick, 
  variant = 'primary' 
}) => {
  return (
    <button 
      className={`btn btn-${variant}`} 
      onClick={onClick}
    >
      {label}
    </button>
  );
};
```

### Stillar

- Tailwind CSS v4 ishlatiladi
- Murakkab stillar uchun Tailwind CSS klasslari birlashtiriladi
- Juda murakkab stillar uchun CSS modullar ishlatilishi mumkin

```tsx
// Tailwind CSS bilan
<div className="flex items-center justify-between p-4 bg-gray-800 text-white rounded-lg">
  <h2 className="text-xl font-mono">Terminal Demo</h2>
  <button className="px-4 py-2 bg-purple-600 hover:bg-purple-700 rounded">
    Run
  </button>
</div>
```

### State boshqaruvi

- Oddiy state uchun React useState va useReducer ishlatiladi
- Murakkab state uchun Context API ishlatiladi
- Global state kerak bo'lsa, Zustand yoki Redux Toolkit ishlatilishi mumkin

### Asinxron operatsiyalar

- Asinxron so'rovlar uchun React Query yoki SWR ishlatilishi mumkin
- Fetch API yoki Axios ishlatiladi
- try/catch bloklari bilan xatolarni boshqarish

```tsx
// Asinxron so'rov namunasi
const fetchData = async () => {
  try {
    setLoading(true);
    const response = await fetch('/api/data');
    const data = await response.json();
    setData(data);
  } catch (error) {
    setError('Ma\'lumotlarni yuklashda xatolik yuz berdi');
    console.error(error);
  } finally {
    setLoading(false);
  }
};
```

### Routing

- React Router DOM ishlatiladi
- Sahifalar `/pages` direktoriyasida joylashtiriladi
- Lazy loading qo'llaniladi

```tsx
// Routing namunasi
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import { lazy, Suspense } from 'react';

const Home = lazy(() => import('./pages/Home'));
const Features = lazy(() => import('./pages/Features'));
const Demo = lazy(() => import('./pages/Demo'));

function App() {
  return (
    <BrowserRouter>
      <Suspense fallback={<div>Loading...</div>}>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/features" element={<Features />} />
          <Route path="/demo" element={<Demo />} />
        </Routes>
      </Suspense>
    </BrowserRouter>
  );
}
```

## Terminal emulyatsiya

Terminal emulyatsiyasi uchun xterm.js yoki shunga o'xshash kutubxona ishlatiladi. Terminal komponentlari quyidagi xususiyatlarga ega bo'lishi kerak:

- Foydalanuvchi kiritishini qabul qilish
- Buyruqlarni ko'rsatish
- Natijalarni ko'rsatish
- Tarix funksiyasi
- Avtomatik to'ldirish (agar mumkin bo'lsa)

## Animatsiyalar

- Framer Motion ishlatiladi
- Animatsiyalar o'rtacha va yumshoq bo'lishi kerak
- Animatsiyalar foydalanuvchi tajribasini yaxshilashi kerak, lekin chalg'itmasligi kerak
- Barcha animatsiyalar `prefers-reduced-motion` media so'roviga javob berishi kerak

```tsx
// Framer Motion animatsiya namunasi
import { motion } from 'framer-motion';

<motion.div
  initial={{ opacity: 0, y: 20 }}
  animate={{ opacity: 1, y: 0 }}
  transition={{ duration: 0.5 }}
>
  Content
</motion.div>
```

## Accessibility (A11y)

- Barcha interaktiv elementlar klaviatura bilan boshqarilishi mumkin bo'lishi kerak
- Semantik HTML elementlari ishlatilishi kerak
- ARIA atributlari to'g'ri ishlatilishi kerak
- Rang kontrastlari WCAG 2.1 AA standartlariga mos kelishi kerak

## Performance

- Rasmlar optimizatsiya qilinishi kerak
- Komponentlar kerak bo'lganda lazy load qilinishi kerak
- Keraksiz re-renderlardan qochish uchun React.memo, useMemo va useCallback ishlatilishi kerak
- Bundle hajmini kichraytirish uchun tree-shaking va code-splitting ishlatilishi kerak

## Testing

- Jest va React Testing Library ishlatiladi
- Har bir komponent uchun unit testlar yozilishi kerak
- Muhim foydalanuvchi oqimlari uchun integratsion testlar yozilishi kerak

## Git qoidalari

- Commit xabarlari aniq va tushunarli bo'lishi kerak
- Har bir feature uchun alohida branch yaratilishi kerak
- Pull requestlar code review qilinishi kerak
- Main branch himoyalangan bo'lishi kerak

## Deployment

- Vercel yoki Netlify orqali deployment
- CI/CD pipeline o'rnatilishi kerak
- Preview deploymentlar har bir pull request uchun yaratilishi kerak 